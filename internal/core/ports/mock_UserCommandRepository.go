// Code generated by mockery v2.32.0. DO NOT EDIT.

package ports

import (
	domain "metaverse/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUserCommandRepository is an autogenerated mock type for the UserCommandRepository type
type MockUserCommandRepository struct {
	mock.Mock
}

// Register provides a mock function with given fields: name, dni, username, email, password, age
func (_m *MockUserCommandRepository) Register(name string, dni string, username string, email string, password string, age int8) (*domain.User, error) {
	ret := _m.Called(name, dni, username, email, password, age)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int8) (*domain.User, error)); ok {
		return rf(name, dni, username, email, password, age)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, int8) *domain.User); ok {
		r0 = rf(name, dni, username, email, password, age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, int8) error); ok {
		r1 = rf(name, dni, username, email, password, age)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserCommandRepository creates a new instance of MockUserCommandRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserCommandRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserCommandRepository {
	mock := &MockUserCommandRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
